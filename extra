 public String update(String message)
    {
       // GB;CITI.0.0;11897;
        System.out.println("Update");
        String reply = null;
        String []retval = (message.split(":")[0]).split(";");
                for (String rval: retval)
                         System.out.println(rval);

                switch(retval[0])
                {
                    /*
                    case "GB":  reply = getBalance(retval[1], retval[2]);
                                break;
                    */
                    case "DP":  reply = deposit(retval[1], retval[2], Float.parseFloat(retval[3]));
                                break;
                    case "WD":  reply = withdraw(retval[1], retval[2], Float.parseFloat(retval[3]));
                                break;
                    default :    break;
                }

                return reply;
    }

    /*public String getBalance(String reqID, String accountNumber)
    {
        String reply = null;
        
        //String []val = reqID.split(".");
        //if (!val[0].equals(this.bankName))
        //    return "invalidRequest";

        Account currAccount = null;

        if (this.accountList.containsKey(accountNumber)) 
        {
            currAccount = this.accountList.get(accountNumber);
        }
        else {
            currAccount = new Account();
            this.accountList.put(accountNumber,currAccount);
        }

        reply = "<"+ reqID + "," + "Processed, " + currAccount.balance + ">";

        System.out.println(reply);
        return reply;

    }*/

    public String deposit(String reqID, String accountNumber, float amount)
    {
        //String []val = reqID.split(".");
        // if (!val[0].equals(this.bankName))
        //     return "invalidRequest";

        Account currAccount = null;
        String trans = "DP," + reqID + "," + amount;;
        String reply = null;
        Boolean isProcessed = false;
        if (this.accountList.containsKey(accountNumber)) {

            currAccount = this.accountList.get(accountNumber);
            if (currAccount.processedTrans.contains(trans))
            {
                reply = "<"+ reqID + "," + "Processed, " + currAccount.balance + ">";
                isProcessed = true;
            }
            else
            {
                for (String s : currAccount.processedTrans)
                    if (s.contains(reqID))
                    {
                        reply = "<"+ reqID + "," + "InconsistentWithHistory, " + currAccount.balance + ">";
                        isProcessed = true;
                        break;
                    }
            }
            if (!isProcessed)
            {
                System.out.println("Account List = "+currAccount.balance);
                currAccount.balance += amount;
                currAccount.processedTrans.add(trans);
                reply = "<"+ reqID + "," + "Processed, " + currAccount.balance + ">";
            }

        } else {
            currAccount = new Account();
            currAccount.balance += amount;
            
            currAccount.processedTrans.add(trans);
            this.accountList.put(accountNumber,currAccount);
            reply = "<"+ reqID + "," + "Processed, " + currAccount.balance + ">";
        }

        System.out.println(reply);
        return reply;
    }

    public String withdraw(String reqID, String accountNumber, float amount)
    {
        Account currAccount = null;
        String trans = "WD," + reqID + "," + amount;;
        String reply = null;
        Boolean isProcessed = false;
        if (this.accountList.containsKey(accountNumber)) {

            currAccount = this.accountList.get(accountNumber);
            if (currAccount.processedTrans.contains(trans))
            {
                reply = "<"+ reqID + "," + "Processed, " + currAccount.balance + ">";
                isProcessed = true;
            }
            else
            {
                for (String s : currAccount.processedTrans)
                    if (s.contains(reqID))
                    {
                        reply = "<"+ reqID + "," + "InconsistentWithHistory, " + currAccount.balance + ">";
                        isProcessed = true;
                        break;
                    }
            }
            if (!isProcessed && currAccount.balance >= amount)
            {
                System.out.println("Account List = "+currAccount.balance);
                currAccount.balance -= amount;
                currAccount.processedTrans.add(trans);
                reply = "<"+ reqID + "," + "Processed, " + currAccount.balance + ">";
            }
            else
            {
                reply = "<"+ reqID + "," + "InsufficientFunds, " + currAccount.balance + ">";
            }


        } else {
            currAccount = new Account();
            this.accountList.put(accountNumber,currAccount);
            reply = "<"+ reqID + "," + "InsufficientFunds, " + currAccount.balance + ">";
        }

        System.out.println(reply);
        return reply;
    }
}


class Account
{
    float balance;
    List <String> processedTrans;

    Account()
    {
        this.balance = 0;
        this.processedTrans = new ArrayList<String>();
    }
}

