import java.io.*;
import java.net.*;
import java.util.*;

public class CRServer {

    private String successor;
    private String predecessor;
    private String myadrress;

    public static void main(String[] args) throws IOException {
         
        if (args.length != 3) {
            System.err.println("Usage: java CRServer <udp_port number> <tcp_port number1> <tcp_port number2");
            System.exit(1);
        }
 
        int udp_portNo = Integer.parseInt(args[0]);
        int tcp_portNo1 = Integer.parseInt(args[1]);
        int tcp_portNo2 = Integer.parseInt(args[2]);

        String hostName = "localhost";
        
        Socket sSocket;
        //ServerSocket serverSocket;

        PrintWriter out = null;
        BufferedReader in = null;
        System.out.println("Creating TCP port for listening peer server");
        
        /*
            Creating ServerSocket for listening from other servers
        */

            
            

        try (ServerSocket serverSocket = new ServerSocket(tcp_portNo1)) { 
                new CRMServerThread(serverSocket.accept()).start();
            
        System.out.println("Created TCP port for lsitening peer server");
        } catch (IOException e) {
            System.err.println("Could not listen on port " + tcp_portNo1);
            System.exit(-1);
        }
        
        

        try (DatagramSocket clientSocket = new DatagramSocket(udp_portNo);)
         {
            System.out.println("Created UDP port");
           
                 sSocket = new Socket(hostName, tcp_portNo2);
                 out = new PrintWriter(sSocket.getOutputStream(), true);
              //   in = new BufferedReader(new InputStreamReader(kkSocket.getInputStream()));
                 System.out.println("Created socket for sending TCP message");
         

            String inputLine, outputLine;
            outputLine = "hi Server Ready";
            
            //out.println(outputLine);
            String dString = null;
      
            while (true){

                byte[] buf = new byte[256];
 
                // receive request
                DatagramPacket packet = new DatagramPacket(buf, buf.length);
                clientSocket.receive(packet);
 
                String receivedMessage = new String(buf);

                System.out.println("Recieved = \n"+receivedMessage);

                String []retval = receivedMessage.split(",");
                for (String rval: retval)
                         System.out.println(rval);

                switch(retval[0])
                {
                    case "WD":  dString = "withdraw Successful";
                                break;
                    case "DP":  dString = "deposit successful";
                                break;
                    case "CB":  dString = "Check balance";
                                break;
                    default:    dString = "NOP";
                                break;
                }
                // figure out response
                //dString ="UDP server mess";
 
                buf = dString.getBytes();
 
        // send the response to the client at "address" and "port"
                dString = packet.getAddress() + ":" + packet.getPort() + ":" ;
                if(out != null)
                    out.println(dString);
                
                InetAddress address = packet.getAddress();
                int port = packet.getPort();

                packet = new DatagramPacket(buf, buf.length, address, port);
                clientSocket.send(packet);
                System.out.println("port "+ udp_portNo + " address"+ address);
                }
 
            /* 
                while ((inputLine = in.readLine()) != null) {
                    outputLine = "kk";
                    out.println(outputLine);
                    if (outputLine.equals("Bye."))
                        break;
                }
            */
        } catch (IOException e) {
            System.out.println("Exception caught when trying to listen on port "
                + udp_portNo + " or listening for a connection");
            System.out.println(e.getMessage());
        }
    }

   /* private void getDetails()
    {   //Read from the configuration file to get the details of the address or ask master reaarding the address



    }

    public int deposit(String reqId, int amount)
    {

    }
 */   
}
